{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jwhua\\\\github\\\\cis550\\\\project\\\\client\\\\src\\\\components\\\\BestLiving.js\";\nimport React from 'react';\nimport PageNavbar from './PageNavbar';\nimport BestLivingRow from './BestLivingRow';\nimport '../style/BestLiving.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Loader, LoaderOptions } from 'google-maps';\nexport default class Recommendations extends React.Component {\n  constructor(props) {\n    super(props); // State maintained by this React component is the selected movie name,\n    // and the list of recommended movies.\n\n    this.state = {\n      movieName: \"\",\n      recMovies: [],\n      initialMap: []\n    };\n    this.handleMovieNameChange = this.handleMovieNameChange.bind(this);\n    this.submitMovie = this.submitMovie.bind(this);\n  }\n\n  handleMovieNameChange(e) {\n    this.setState({\n      movieName: e.target.value\n    });\n  }\n  /* ---- Q2 (Recommendations) ---- */\n  // Hint: Name of movie submitted is contained in `this.state.movieName`.\n\n\n  submitMovie() {\n    // Send an HTTP request to the server.\n    fetch(\"http://localhost:8081/recommendations/\" + this.state.movieName, {\n      method: 'GET' // The type of HTTP request.\n\n    }).then(res => res.json()) // Convert the response data to a JSON.\n    .then(recMovieList => {\n      if (!recMovieList) return;\n      console.log(recMovieList); //displays your JSON object in the console\n\n      let recMovieDivs = recMovieList.map((recMovie, i) => /*#__PURE__*/React.createElement(BestLivingRow, {\n        title: recMovie.title,\n        id: recMovie.id,\n        rating: recMovie.rating,\n        vote_count: recMovie.vote_count,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 8\n        }\n      })); // Set the state of the recommended movies list to the value returned by the HTTP response from the server.\n\n      this.setState({\n        recMovies: recMovieDivs\n      });\n    }).catch(err => console.log(err)); // Print the error if there is one.\n  } // connecting to google API and initial the google map\n\n\n  initialMap() {\n    const options = {};\n    const loader = new Loader('AIzaSyA0rycsA7bNG_uKcvXq7i5wIcYmOIalCQs');\n    const google = loader.load().then(function (google) {\n      // The location of Uluru\n      var uluru = {\n        lat: -25.344,\n        lng: 131.036\n      };\n      var map = new google.maps.Map(document.getElementById('map'), {\n        center: uluru,\n        zoom: 4\n      });\n      var marker = new google.maps.Marker({\n        position: uluru,\n        map: map\n      });\n    });\n  } // let recMovieDivs = recMovieList.map((recMovie, i) =>\n  // <BestLivingRow title={recMovie.title} id={recMovie.id} rating={recMovie.rating} vote_count={recMovie.vote_count} />\n  // );\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"BestLiving\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(PageNavbar, {\n      active: \"bestliving\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container bestliving-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"h3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }, \"My Google Maps Demo\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"map\",\n      className: \"map-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    }))));\n  }\n\n} // <div className=\"container recommendations-container\">\n// \t<div className=\"jumbotron\">\n// \t\t<div className=\"h5\">Recommendations</div>\n// \t\t<br></br>\n// \t\t<div className=\"input-container\">\n// \t\t\t<input type='text' placeholder=\"Enter Movie Name\" value={this.state.movieName} onChange={this.handleMovieNameChange} id=\"movieName\" className=\"movie-input\"/>\n// \t\t\t<button id=\"submitMovieBtn\" className=\"submit-btn\" onClick={this.submitMovie}>Submit</button>\n// \t\t</div>\n// \t\t<div className=\"header-container\">\n// \t\t\t<div className=\"h6\">You may like ...</div>\n// \t\t\t<div className=\"headers\">\n// \t\t\t\t<div className=\"header\"><strong>Title</strong></div>\n// \t\t\t\t<div className=\"header\"><strong>Movie ID</strong></div>\n// \t\t\t\t\t\t<div className=\"header\"><strong>Rating</strong></div>\n// \t\t\t\t\t\t<div className=\"header\"><strong>Vote Count</strong></div>\n// \t\t\t</div>\n// \t\t</div>\n// \t\t<div className=\"results-container\" id=\"results\">\n// \t\t\t{this.state.recMovies}\n// \t\t</div>\n// \t</div>\n// </div>","map":{"version":3,"sources":["C:/Users/jwhua/github/cis550/project/client/src/components/BestLiving.js"],"names":["React","PageNavbar","BestLivingRow","Loader","LoaderOptions","Recommendations","Component","constructor","props","state","movieName","recMovies","initialMap","handleMovieNameChange","bind","submitMovie","e","setState","target","value","fetch","method","then","res","json","recMovieList","console","log","recMovieDivs","map","recMovie","i","title","id","rating","vote_count","catch","err","options","loader","google","load","uluru","lat","lng","maps","Map","document","getElementById","center","zoom","marker","Marker","position","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PageNavbar from './PageNavbar';\r\nimport BestLivingRow from './BestLivingRow';\r\nimport '../style/BestLiving.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Loader, LoaderOptions} from 'google-maps';\r\n\r\nexport default class Recommendations extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\t// State maintained by this React component is the selected movie name,\r\n\t\t// and the list of recommended movies.\r\n\t\tthis.state = {\r\n\t\t\tmovieName: \"\",\r\n\t\t\trecMovies: [],\r\n\t\t\tinitialMap: []\r\n\t\t}\r\n\r\n\t\tthis.handleMovieNameChange = this.handleMovieNameChange.bind(this);\r\n\t\tthis.submitMovie = this.submitMovie.bind(this);\r\n\t}\r\n\r\n\thandleMovieNameChange(e) {\r\n\t\tthis.setState({\r\n\t\t\tmovieName: e.target.value\r\n\t\t});\r\n\t}\r\n\r\n\t/* ---- Q2 (Recommendations) ---- */\r\n\t// Hint: Name of movie submitted is contained in `this.state.movieName`.\r\n\tsubmitMovie() {\r\n\t\t// Send an HTTP request to the server.\r\n        fetch(\"http://localhost:8081/recommendations/\" + this.state.movieName, {\r\n          method: 'GET' // The type of HTTP request.\r\n        })\r\n          .then(res => res.json()) // Convert the response data to a JSON.\r\n          .then(recMovieList => {\r\n            if (!recMovieList) return;\r\n            console.log(recMovieList); //displays your JSON object in the console\r\n  \t\t    let recMovieDivs = recMovieList.map((recMovie, i) =>\r\n  \t\t\t  <BestLivingRow title={recMovie.title} id={recMovie.id} rating={recMovie.rating} vote_count={recMovie.vote_count} />\r\n  \t\t    );\r\n\r\n            // Set the state of the recommended movies list to the value returned by the HTTP response from the server.\r\n            this.setState({\r\n              recMovies: recMovieDivs\r\n            })\r\n          })\r\n          .catch(err => console.log(err))\t// Print the error if there is one.\r\n\t}\r\n\r\n\t// connecting to google API and initial the google map\r\n\tinitialMap(){\r\n\t\tconst options: LoaderOptions = {};\r\n\t\tconst loader = new Loader('AIzaSyA0rycsA7bNG_uKcvXq7i5wIcYmOIalCQs');\r\n\r\n\t\tconst google = loader.load().then(function (google) {\r\n\t\t\t// The location of Uluru\r\n\t    var uluru = {\r\n\t      lat: -25.344,\r\n\t      lng: 131.036\r\n\t    };\r\n\r\n    \tvar map = new google.maps.Map(document.getElementById('map'), {\r\n        center: uluru,\r\n        zoom: 4,\r\n    \t});\r\n\r\n\t\t\tvar marker = new google.maps.Marker({\r\n      position: uluru,\r\n      map: map\r\n    });\r\n\t\t});\r\n\t}\r\n\r\n\t\t// let recMovieDivs = recMovieList.map((recMovie, i) =>\r\n\t\t// <BestLivingRow title={recMovie.title} id={recMovie.id} rating={recMovie.rating} vote_count={recMovie.vote_count} />\r\n\t\t// );\r\n\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"BestLiving\">\r\n\t\t\t\t<PageNavbar active=\"bestliving\" />\r\n\r\n\t\t\t\t<div className=\"container bestliving-container\">\r\n\t\t\t\t\t<div className=\"jumbotron\">\r\n\t\t\t\t\t\t<div class=\"h3\">My Google Maps Demo</div>\r\n\r\n\t\t\t\t\t\t<br></br>\r\n\r\n\t\t\t\t\t\t<div id=\"map\" className=\"map-container\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t  </div>\r\n\t\t);\r\n\t}\r\n}\r\n// <div className=\"container recommendations-container\">\r\n// \t<div className=\"jumbotron\">\r\n// \t\t<div className=\"h5\">Recommendations</div>\r\n// \t\t<br></br>\r\n// \t\t<div className=\"input-container\">\r\n// \t\t\t<input type='text' placeholder=\"Enter Movie Name\" value={this.state.movieName} onChange={this.handleMovieNameChange} id=\"movieName\" className=\"movie-input\"/>\r\n// \t\t\t<button id=\"submitMovieBtn\" className=\"submit-btn\" onClick={this.submitMovie}>Submit</button>\r\n// \t\t</div>\r\n// \t\t<div className=\"header-container\">\r\n// \t\t\t<div className=\"h6\">You may like ...</div>\r\n// \t\t\t<div className=\"headers\">\r\n// \t\t\t\t<div className=\"header\"><strong>Title</strong></div>\r\n// \t\t\t\t<div className=\"header\"><strong>Movie ID</strong></div>\r\n// \t\t\t\t\t\t<div className=\"header\"><strong>Rating</strong></div>\r\n// \t\t\t\t\t\t<div className=\"header\"><strong>Vote Count</strong></div>\r\n// \t\t\t</div>\r\n// \t\t</div>\r\n// \t\t<div className=\"results-container\" id=\"results\">\r\n// \t\t\t{this.state.recMovies}\r\n// \t\t</div>\r\n// \t</div>\r\n// </div>\r\n"]},"metadata":{},"sourceType":"module"}