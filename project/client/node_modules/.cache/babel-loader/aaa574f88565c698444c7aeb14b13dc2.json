{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jwhua\\\\github\\\\cis550\\\\project\\\\client\\\\src\\\\components\\\\MapContainer.js\";\nimport { Map, GoogleApiWrapper, Marker, InfoWindow } from 'google-maps-react';\nimport React from 'react';\nexport class MapContainer extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.onMarkerClick = (props, marker, e) => this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.state = {\n      // this is just an example. Markers are fetched from BestLivings\n      nyc: this.props.mapInfo,\n      showingInfoWindow: false,\n      // Hides or shows the InfoWindow\n      activeMarker: {},\n      // Shows the active marker upon click\n      selectedPlace: {} // Shows the InfoWindow to the selected place upon a marker\n\n    };\n    this.displayHostLink = this.displayHostLink.bind(this);\n    this.displayMovieLink = this.displayMovieLink.bind(this);\n    this.onMarkerClick = this.onMarkerClick.bind(this);\n    this.onClose = this.onClose.bind(this);\n    console.log(this.state.nyc);\n  } // TODO: get the coordinates and update \"nyc\" document array based on some conditions given by users\n\n\n  getCoordinates() {}\n\n  displayHostLink(host_url, rating, price) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"hostLink\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, \"price: \", price), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, \"rating: \", rating), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, \"please \", /*#__PURE__*/React.createElement(\"a\", {\n      href: host_url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 19\n      }\n    }, \"click here\"), \" to check more detailed infomation of the host. \"));\n  }\n\n  displayMovieLink(link, scene) {\n    // additional icons: https://sites.google.com/site/gmapsdevelopment/\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"imdmLink\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, \"This place is used for a \", scene, \" scene, please \", /*#__PURE__*/React.createElement(\"a\", {\n      href: link,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 59\n      }\n    }, \"click here\"), \" for more: \"));\n  }\n\n  render() {\n    const mapStyles = {\n      width: '100%',\n      height: '100%'\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"googleMapContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Map, {\n      google: this.props.google,\n      zoom: 10,\n      style: mapStyles,\n      initialCenter: {\n        lat: 40.7128,\n        lng: -74.0060\n      } //center of nyc\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, this.state.nyc.map((info, index) => {\n      if (info.film !== undefined) {\n        return /*#__PURE__*/React.createElement(Marker, {\n          key: index,\n          id: index,\n          position: {\n            lat: info.latitude,\n            lng: info.longitude\n          },\n          onClick: this.onMarkerClick,\n          name: 'Part of \"' + info.film + '\" is filmed here!',\n          subText: this.displayMovieLink(info.imdb_link, info.scene_type),\n          options: {\n            icon: {\n              url: \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\"\n            }\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 21\n          }\n        });\n      } else {\n        return /*#__PURE__*/React.createElement(Marker, {\n          key: index,\n          id: index,\n          position: {\n            lat: info.latitude,\n            lng: info.longitude\n          },\n          onClick: this.onMarkerClick,\n          name: info.name,\n          subText: this.displayHostLink(info.host_url, info.rating, info.price),\n          options: {\n            icon: {\n              url: \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\"\n            }\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 21\n          }\n        });\n      }\n    }), /*#__PURE__*/React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      visible: this.state.showingInfoWindow,\n      onClose: this.onClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }, this.state.selectedPlace.name), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, this.state.selectedPlace.subText)))));\n  }\n\n}\nexport default GoogleApiWrapper({\n  // This is important! Do not leak it!\n  apiKey: 'AIzaSyA0rycsA7bNG_uKcvXq7i5wIcYmOIalCQs'\n})(MapContainer);","map":{"version":3,"sources":["C:/Users/jwhua/github/cis550/project/client/src/components/MapContainer.js"],"names":["Map","GoogleApiWrapper","Marker","InfoWindow","React","MapContainer","Component","constructor","props","onMarkerClick","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","onClose","state","nyc","mapInfo","displayHostLink","bind","displayMovieLink","console","log","getCoordinates","host_url","rating","price","link","scene","render","mapStyles","width","height","google","lat","lng","map","info","index","film","undefined","latitude","longitude","imdb_link","scene_type","icon","url","name","subText","apiKey"],"mappings":"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","sourcesContent":["import { Map, GoogleApiWrapper, Marker, InfoWindow } from 'google-maps-react';\r\nimport React from 'react';\r\n\r\nexport class MapContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      // this is just an example. Markers are fetched from BestLivings\r\n      nyc: this.props.mapInfo,\r\n      showingInfoWindow: false,  // Hides or shows the InfoWindow\r\n      activeMarker: {},          // Shows the active marker upon click\r\n      selectedPlace: {}          // Shows the InfoWindow to the selected place upon a marker\r\n    }\r\n    this.displayHostLink = this.displayHostLink.bind(this);\r\n    this.displayMovieLink = this.displayMovieLink.bind(this);\r\n    this.onMarkerClick = this.onMarkerClick.bind(this);\r\n    this.onClose = this.onClose.bind(this);\r\n    console.log(this.state.nyc);\r\n  }\r\n\r\n  // TODO: get the coordinates and update \"nyc\" document array based on some conditions given by users\r\n  getCoordinates(){\r\n\r\n  }\r\n\r\n  onMarkerClick = (props, marker, e) =>\r\n    this.setState({\r\n      selectedPlace: props,\r\n      activeMarker: marker,\r\n      showingInfoWindow: true\r\n    });\r\n\r\n  onClose = props => {\r\n    if (this.state.showingInfoWindow) {\r\n      this.setState({\r\n        showingInfoWindow: false,\r\n        activeMarker: null\r\n      });\r\n    }\r\n  };\r\n\r\n  displayHostLink (host_url, rating, price){\r\n\r\n    return (\r\n      <div class=\"hostLink\">\r\n        <p>price: {price}</p>\r\n        <p>rating: {rating}</p>\r\n        <p>please <a href = {host_url}>click here</a> to check more detailed infomation of the host. </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  displayMovieLink (link, scene){\r\n    // additional icons: https://sites.google.com/site/gmapsdevelopment/\r\n    return (\r\n      <div class=\"imdmLink\">\r\n        <p>This place is used for a {scene} scene, please <a href = {link}>click here</a> for more: </p>\r\n      </div>\r\n    );\r\n\r\n  }\r\n\r\n  render() {\r\n    const mapStyles = {\r\n\t  \twidth: '100%',\r\n\t  \theight: '100%'\r\n\t\t};\r\n    return (\r\n        <div class=\"googleMapContainer\">\r\n\r\n          <Map\r\n            google={this.props.google}\r\n            zoom={10}\r\n            style={mapStyles}\r\n            initialCenter={{ lat: 40.7128, lng: -74.0060}}  //center of nyc\r\n          >\r\n              {this.state.nyc.map((info, index) => {\r\n                if (info.film !== undefined){\r\n                  return (\r\n                    <Marker key={index} id={index} position={{lat: info.latitude, lng: info.longitude}}\r\n                      onClick = {this.onMarkerClick}\r\n                      name = {'Part of \"'+info.film + '\" is filmed here!'}\r\n                      subText = {this.displayMovieLink(info.imdb_link, info.scene_type)}\r\n                      options = {{icon: {url: \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\"}}}\r\n                    />\r\n                  );}\r\n                else{\r\n                  return (\r\n                    <Marker key={index} id={index} position={{lat: info.latitude, lng: info.longitude}}\r\n                      onClick = {this.onMarkerClick}\r\n                      name = {info.name }\r\n                      subText = {this.displayHostLink(info.host_url, info.rating, info.price)}\r\n                      options = {{icon: {url: \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\"}}}\r\n                    />\r\n                  );}\r\n              })}\r\n\r\n\r\n            <InfoWindow\r\n              marker={this.state.activeMarker}\r\n              visible={this.state.showingInfoWindow}\r\n              onClose={this.onClose}\r\n            >\r\n              <div>\r\n                <h4>{this.state.selectedPlace.name}</h4>\r\n                <p>{this.state.selectedPlace.subText}</p>\r\n              </div>\r\n            </InfoWindow>\r\n          </Map>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  // This is important! Do not leak it!\r\n  apiKey: 'AIzaSyA0rycsA7bNG_uKcvXq7i5wIcYmOIalCQs'\r\n})(MapContainer);\r\n"]},"metadata":{},"sourceType":"module"}